classdef BCWrapper
    %BCWRAPPER Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        BC struct
        GW GridWrapper
        xMinFaces
        xMaxFaces
        yMinFaces
        yMaxFaces
        zMinFaces
        zMaxFaces
    end
    
    methods
        function bc = BCWrapper(gridWrapper)
            %BCWRAPPER Construct an instance of this class
            %   Detailed explanation goes here
            arguments
                gridWrapper GridWrapper
            end
            bc.BC = [];
            bc.GW = gridWrapper;

            bc.xMinFaces = boundaryFaceIndices(gridWrapper.G, 'xMin');
            bc.xMaxFaces = boundaryFaceIndices(gridWrapper.G, 'xMax');
            bc.yMinFaces = boundaryFaceIndices(gridWrapper.G, 'yMin');
            bc.yMaxFaces = boundaryFaceIndices(gridWrapper.G, 'yMax');
            bc.zMinFaces = boundaryFaceIndices(gridWrapper.G, 'zMin');
            bc.zMaxFaces = boundaryFaceIndices(gridWrapper.G, 'zMax');
        end
        
        function bc = addSide(bc, side, varNamedArgs)
            %METHOD1 Summary of this method goes here
            %   Detailed explanation goes here
            arguments
                bc BCWrapper
                side
                varNamedArgs.pressure = nan;
                varNamedArgs.flux = nan;
                varNamedArgs.saturation = [];
                varNamedArgs.temperature = nan;
                varNamedArgs.heatFlux = nan;
            end
            
            if isnan(varNamedArgs.pressure) && isnan(varNamedArgs.flux)
                error("Either a pressure or a flux value has to be supplied.")
            elseif isnan(varNamedArgs.temperature) && isnan(varNamedArgs.heatFlux)
                error("Either a temperature or a heat flux has to be defined.")
            end
            
            % Read old temperature and heatflux values
            if isfield(bc.BC, 'T')
                existingTemperature = bc.BC.T;
                existingHeatFlux = bc.BC.Hflux;
            else
                existingTemperature = nan;
                existingHeatFlux = nan;
            end

            % Pressure BC
            if ~isnan(varNamedArgs.pressure)
                if numel(varNamedArgs.saturation) == 0
                    bc.BC = pside(bc.BC, bc.GW.G, side, varNamedArgs.pressure);
                else
                    bc.BC = pside(bc.BC, bc.GW.G, side, varNamedArgs.pressure, 'sat', varNamedArgs.saturation);
                end
            % Flux BC
            elseif ~isnan(varNamedArgs.flux)
                if numel(varNamedArgs.saturation) == 0
                    bc.BC = fluxside(bc.BC, bc.GW.G, side, varNamedArgs.flux);
                else
                    bc.BC = fluxside(bc.BC, bc.GW.G, side, varNamedArgs.flux, 'sat', varNamedArgs.saturation);
                end
            end
            
            sideFaces = numel(boundaryFaceIndices(bc.GW.G, side));
            % Temperature BC
            if ~isnan(varNamedArgs.temperature)
                if isnan(existingTemperature)
                    temperature = repmat(varNamedArgs.temperature, sideFaces, 1);
                end
                
                bc.BC = addThermalBCProps(bc.BC, 'T', temperature);
            end

        end

    end
end

